{"version":3,"sources":["app.js","environment.js","main.js","components/game-screen.js","components/restart-overlay.js","components/status.js","services/keystroke-service.js","services/score-service.js","services/screen-service.js","services/snack-service.js","services/snake-service.js","services/timing-service.js","resources/index.js"],"names":["App","keystrokeService","timingService","eventAggregator","ea","message","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","developmentLogging","start","then","setRoot","GameScreenCustomElement","screenService","snakeService","snackService","snakeImages","snackImages","spriteSize","snakeParts","snackNames","names","snacks","roundToSpriteSize","size","Math","floor","attached","self","$arena","$","$body","$snakeImages","$snackImages","targetWidth","width","targetHeight","height","each","push","setDomVars","setCenter","RestartOverlayCustomElement","showOverlay","firstGame","pause","publish","addEventListeners","subscribe","StatusCustomElement","score","highScore","resetVars","speed","response","length","snack","setTimeout","resetHighscore","KeystrokeService","acceptMoves","myKeypressCallback","keypressInput","bind","setSubscribers","keysOff","keysOn","document","addEventListener","e","keycode","event","key","ScoreService","multiplier","readHighscore","saveHighscore","update","amount","max","setMultiplier","factor","resetMultiplier","set","expiry","hs","get","initScore","ScreenService","halfSprite","snackSize","halfSnackSize","canvasCenter","drawSnake","snake","type","i","segments","segment","ctx","save","translate","rotate","direction","PI","drawImage","restore","drawSnacks","position","nameIndex","fadeArena","fillStyle","fillRect","canvas","getContext","clientWidth","clientHeight","x","y","limits","right","bottom","left","top","SnackService","newSnack","name","samePosition","pos1","pos2","hitSnack","head","neck","removeSnack","addSnack","randomIndex","random","index","splice","initSnacks","SnakeService","directions","deadSegments","snackMethods","nope","axe","cutSnake","beer","bunny","diamond","gold","ruby","skull","snail","trash","viagra","step","grow","turnSteps","advanceHead","pop","slice","segmentSize","unshift","hitWall","hitSnake","method","toLowerCase","halfSnake","fallDown","crawling","indexOf","newY","wallHit","startsWith","center","minTurnSteps","ceil","stepSize","initSnake","round","accelleration","TimingService","scoreService","steps","fallTimerHandle","stepTimerHandle","baseGrowInterval","baseScoreInterval","baseSnackInterval","baseSpeedupInterval","maxStepInterval","minStepInterval","dropInterval","snackDuration","methods","growSlower","speedUp","multiPlyScore","dropSnake","slowDown","growHarder","startGame","resetIntervals","resumeGame","setInterval","drawScreen","stepInterval","growInterval","speedupInterval","snackInterval","clearTimedEvents","clearInterval","pauseGame","restart","split","scoreInterval","baseSoreInterval"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport $ from 'jquery';\nimport { KeystrokeService } from './services/keystroke-service';\nimport { TimingService } from './services/timing-service';\n\n@inject(KeystrokeService, TimingService, EventAggregator)\n\nexport class App {\n\n    constructor(keystrokeService, timingService, eventAggregator) {\n        this.keystrokeService = keystrokeService;\n        this.timingService = timingService;\n        this.ea = eventAggregator;\n        this.message = 'Snake by ashWare';\n    }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n    longStackTraces: environment.debug,\n    warnings: {\n        wForgottenReturn: false\n    }\n});\n\nexport function configure(aurelia) {\n    aurelia.use\n        .standardConfiguration()\n        .feature('resources')\n\n    aurelia.use\n        .plugin('aurelia-cookie');\n\n    if (environment.debug) {\n        aurelia.use.developmentLogging();\n    }\n\n    if (environment.testing) {\n        aurelia.use.plugin('aurelia-testing');\n    }\n\n    aurelia.start().then(() => aurelia.setRoot());\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport { ScreenService } from '../services/screen-service';\nimport { SnakeService } from '../services/snake-service';\nimport { SnackService } from '../services/snack-service';\n\n@inject(EventAggregator, ScreenService, SnakeService, SnackService)\n\nexport class GameScreenCustomElement {\n\n    constructor(eventAggregator, screenService, snakeService, snackService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snakeService = snakeService;\n        this.snackService = snackService;\n        this.snakeImages = [];\n        this.snackImages = [];\n        this.spriteSize = 16;\n        // images with these names.jpg should exist in /images/..\n        this.snakeParts = this.snakeService.snakeParts;\n        this.snackNames = this.snackService.names;\n        this.snacks = this.snackService.snacks;\n    }\n\n    roundToSpriteSize(size) {\n        return Math.floor(size / this.spriteSize) * this.spriteSize;\n    }\n\n    attached() {\n        let self = this;\n        this.$arena = $('.arena');\n        let $body = $('body');\n        let $snakeImages = $('.snakeImages img');\n        let $snackImages = $('.snackImages img');\n        let targetWidth = this.roundToSpriteSize($body.width() - 48);\n        let targetHeight = this.roundToSpriteSize($body.height() - 48);\n        this.$arena.width(targetWidth);\n        this.$arena.height(targetHeight)\n        $snakeImages.each(function () {\n            self.snakeImages.push(this);\n        });\n        $snackImages.each(function () {\n            self.snackImages.push(this);\n        });\n        $(() => {\n            this.screenService.setDomVars(this.$arena, this.snakeImages, this.snackImages);\n            this.snakeService.setCenter();\n        });\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class RestartOverlayCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.showOverlay = true;\n        this.firstGame = true;\n        this.pause = false;\n    }\n\n    start() {\n        this.ea.publish('start');\n        this.showOverlay = false;\n        this.firstGame = false;\n    }\n\n    addEventListeners() {\n        this.ea.subscribe('gameOver', response => {\n            this.showOverlay = true;\n        });\n        this.ea.subscribe('start', response => {\n            this.showOverlay = false;\n        });\n        this.ea.subscribe('pause', response => {\n            this.pause = !this.pause;\n        });\n    }\n\n    attached() {\n        this.addEventListeners();\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class StatusCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.score = 0;\n        this.highScore;\n        this.resetVars();\n    }\n\n    addEventListeners() {\n        this.ea.subscribe('speed', response => {\n            this.speed = response;\n        });\n        this.ea.subscribe('grow', response => {\n            this.length = response;\n        });\n        this.ea.subscribe('start', response => {\n            this.resetVars();\n        });\n        this.ea.subscribe('score', response => {\n            this.score = response.score;\n            this.highScore = response.highScore;\n        });\n        this.ea.subscribe('snack', response => {\n            this.snack = response;\n            setTimeout(() => {\n                this.snack = '';\n            }, 15000);\n        });\n        this.ea.subscribe('die', response => {\n            this.snack = response;\n        });\n\n    }\n\n    resetHighscore() {\n        this.ea.publish('resetHigh');\n    }\n\n    resetVars() {\n        this.speed = 0;\n        this.length = 1;\n        this.score = 0;\n        this.snack = '';\n    }\n\n    attached() {\n        this.addEventListeners();\n    }\n\n}\n","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class KeystrokeService {\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.acceptMoves = true;\n        this.myKeypressCallback = this.keypressInput.bind(this);\n        this.setSubscribers();\n    }\n\n    keysOff() {\n        this.acceptMoves = false;\n    }\n\n    keysOn() {\n        this.acceptMoves = true;\n    }\n\n    setSubscribers() {\n        document.addEventListener('keydown', this.myKeypressCallback, false);\n        this.ea.subscribe('keysOff', response => {\n            this.keysOff();\n        });\n        this.ea.subscribe('keysOn', response => {\n            this.keysOn();\n        });\n    }\n\n    // This function is called by the aliased method\n    keypressInput(e) {\n        // console.log(e);\n        let keycode = event.key; // also for cross-browser compatible\n        (this.acceptMoves) && this.ea.publish('keyPressed', keycode);\n    }\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { AureliaCookie } from 'aurelia-cookie';\n\n@inject(EventAggregator)\n\nexport class ScoreService {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        // this.cookie = aureliaCookie;\n        this.multiplier = 1;\n        this.score = 0;\n        this.highScore = this.readHighscore();\n        this.ea.subscribe('gameOver', response => { this.saveHighscore() });\n        this.ea.subscribe('resetHigh', response => { this.resetHighscore() });\n    }\n\n    update(amount) {\n        (amount) && (this.score += amount * this.multiplier);\n        this.highScore = Math.max(this.score, this.highScore);\n        this.ea.publish('score', {\n            score: this.score,\n            highScore: this.highScore\n        });\n    }\n\n    setMultiplier(factor) {\n        if (factor) {\n            this.multiplier = factor;\n        } else {\n            this.multiplier = 10;\n        }\n    }\n\n    resetMultiplier() {\n        this.multiplier = 1;\n    }\n\n    saveHighscore() {\n        AureliaCookie.set('highScore', this.highScore, {\n            expiry: -1,\n        });\n    }\n\n    readHighscore() {\n        let hs = AureliaCookie.get('highScore');\n        if (hs > 0) {\n            return hs;\n        }\n        return 0;\n    }\n\n    resetHighscore() {\n        this.highScore = 0;\n        this.saveHighscore();\n    }\n\n    initScore() {\n        this.score = 0;\n    }\n\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class ScreenService {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.spriteSize = 16;\n        this.halfSprite = this.spriteSize / 2;\n        this.snackSize = 24;\n        this.halfSnackSize = this.snackSize / 2;\n        this.canvasCenter = {};\n    }\n\n    drawSnake(snake) {\n        let type = 0;\n        for (let i = 0; i < snake.segments.length; i++) {\n            let segment = snake.segments[i];\n            this.ctx.save();\n            this.ctx.translate(segment[0], segment[1]);\n            (segment.type !== 1) && this.ctx.rotate(snake.direction * Math.PI / 2);\n            this.ctx.drawImage(this.snakeImages[type], -this.halfSprite, -this.halfSprite);\n            this.ctx.restore();\n            type = 1;\n        }\n    }\n\n    drawSnacks(snacks) {\n        for (let i = 0; i < snacks.length; i++) {\n            let snack = snacks[i];\n            this.ctx.save();\n            this.ctx.translate(snack.position[0] - this.halfSnackSize, snack.position[1] - this.halfSnackSize);\n            this.ctx.drawImage(this.snackImages[snack.nameIndex], 0, 0, this.snackSize, this.snackSize);\n            this.ctx.restore();\n        }\n    }\n\n    fadeArena() {\n        this.ctx.fillStyle = 'rgba(0,0,0,0.95)';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    roundToSpriteSize(size) {\n        return Math.floor(size / this.spriteSize) * this.spriteSize + this.halfSprite;\n    }\n\n    setDomVars($arena, snakeImages, snackImages) {\n        this.canvas = $('#arena')[0];\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = this.canvas.clientWidth;\n        this.canvas.height = this.canvas.clientHeight;\n        this.canvasCenter = {\n            x: this.roundToSpriteSize($arena.width() / 2),\n            y: this.roundToSpriteSize($arena.height() / 2)\n        };\n        this.limits = {\n            right: this.canvas.width,\n            bottom: this.canvas.height,\n            left: 0,\n            top: 0\n        };\n        this.snakeImages = snakeImages;\n        this.snackImages = snackImages;\n    }\n\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { ScreenService } from './screen-service'\n\n@inject(EventAggregator, ScreenService)\n\nexport class SnackService {\n    constructor(eventAggregator, screenService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snacks = [];\n        this.names = [\n            'axe',\n            'beer',\n            'bunny',\n            'diamond',\n            'gold',\n            'ruby',\n            'skull',\n            'snail',\n            'trash',\n            'viagra'\n        ]\n    }\n\n    newSnack(x, y, name, i) {\n        let snack = {\n            position: [x, y],\n            name: name,\n            nameIndex: i\n        }\n        return snack;\n    }\n\n    samePosition(pos1, pos2) {\n        return pos1[0] == pos2[0] && pos1[1] == pos2[1];\n    }\n\n    hitSnack(head, neck) {\n        for (let i = 0; i < this.snacks.length - 1; i++) {\n            let snack = this.snacks[i];\n            if (this.samePosition(snack.position, head) ||\n                this.samePosition(snack.position, neck)) {\n                this.removeSnack(i);\n                return snack.name;\n            }\n        }\n        return 'nope';\n    }\n\n    addSnack() {\n        let randomIndex = Math.floor(Math.random() * this.names.length);\n        let snack = this.names[randomIndex];\n        let x = this.screenService.roundToSpriteSize(Math.floor(Math.random() * (this.screenService.limits.right - this.screenService.spriteSize)))\n        let y = this.screenService.roundToSpriteSize(Math.floor(Math.random() * (this.screenService.limits.bottom - this.screenService.spriteSize)))\n        this.snacks.push(this.newSnack(x, y, snack, randomIndex));\n    }\n\n    removeSnack(index) {\n        this.snacks.splice(index, 1);\n    }\n\n    initSnacks() {\n        this.snacks = [];\n    }\n\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { ScreenService } from './screen-service'\nimport { SnackService } from '../services/snack-service';\n\n@inject(EventAggregator, ScreenService, SnackService)\n\nexport class SnakeService {\n    constructor(eventAggregator, screenService, snackService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snackService = snackService;\n        this.snakeParts = [\n            'head',\n            'body',\n            'tail'\n        ];\n        this.snake = {\n            direction: 0,\n            directions: [\n                [1, 0],\n                [0, 1],\n                [-1, 0],\n                [0, -1],\n                [0, 0]\n            ],\n            segments: [],\n            deadSegments: []\n        }\n        this.snackMethods = {\n            nope: () => {\n                void (0);\n            },\n            axe: () => {\n                this.cutSnake();\n                this.ea.publish('snack', 'Axe: lost half of yourself');\n            },\n            beer: () => {\n                this.ea.publish('snack', 'Beer: grow slower for 15 seconds');\n            },\n            bunny: () => {\n                this.ea.publish('snack', 'Bunny: run faster for 15 seconds');\n            },\n            diamond: () => {\n                this.ea.publish('snack', 'Diamond: 10000 points');\n            },\n            gold: () => {\n                this.ea.publish('snack', 'Gold: 1000 points');\n            },\n            ruby: () => {\n                this.ea.publish('snack', 'Ruby: score &times; 10 for 15 seconds');\n            },\n            skull: () => {\n                this.ea.publish('snack', 'Skull: you die');\n            },\n            snail: () => {\n                this.ea.publish('snack', 'Snail: run slower for 15 seconds');\n            },\n            trash: () => {\n                this.ea.publish('snack', 'Trash: trash all extra&rsquo;s');\n            },\n            viagra: () => {\n                this.ea.publish('snack', 'Viagra: grow harder for 15 seconds');\n            }\n        }\n        this.setSubscribers();\n    }\n\n    step(grow) {\n        // limit the rate at which turns are accepted\n        (this.snake.turnSteps > 0) && this.snake.turnSteps--;\n        this.advanceHead();\n        (!grow) && (this.snake.segments.pop());\n    }\n\n    advanceHead() {\n        let head = this.snake.segments[0].slice();\n        let neck = head;\n        (this.snake.segments.length > 1) && (neck = this.snake.segments[1].slice());\n        head[0] += this.snake.directions[this.snake.direction][0] * this.snake.segmentSize;\n        head[1] += this.snake.directions[this.snake.direction][1] * this.snake.segmentSize;\n        this.snake.segments.unshift(head);\n        this.hitWall();\n        this.hitSnake();\n        let method = this.snackService.hitSnack(head, neck).toLowerCase();\n        this.snackMethods[method]();\n    }\n\n    cutSnake() {\n        let halfSnake = Math.floor(this.snake.segments.length / 2)\n        this.snake.segments.splice(-halfSnake);\n    }\n\n    fallDown() {\n        this.crawling = false;\n        for (let i = 0; i < this.snake.segments.length; i++) {\n            if (this.snake.deadSegments.indexOf(i) < 0) {\n                let segment = this.snake.segments[i];\n                let newY = (segment[1] + 1) * 1.05;\n                if (newY <= this.screenService.limits.bottom) {\n                    segment[1] = newY;\n                } else {\n                    this.snake.deadSegments.push(i);\n                }\n            }\n            if (this.snake.deadSegments.length >= this.snake.segments.length) {\n                this.ea.publish('gameOver');\n            }\n        }\n    }\n\n    hitWall() {\n        let head = this.snake.segments[0];\n        let wallHit =\n            head[0] > this.screenService.limits.right - this.halfSprite ||\n            head[0] < this.screenService.limits.left + this.halfSprite ||\n            head[1] > this.screenService.limits.bottom - this.halfSprite ||\n            head[1] < this.screenService.limits.top + this.halfSprite;\n        wallHit && (this.ea.publish('die', 'You hit a wall'));\n    }\n\n    hitSnake() {\n        let head = this.snake.segments[0];\n        for (let i = 3; i < this.snake.segments.length - 1; i++) {\n            let segment = this.snake.segments[i];\n            if (this.samePosition(segment, head)) {\n                this.ea.publish('die', 'You tried to bite yourself that&rsquo;s deadly');\n                return true;\n            }\n        }\n        return false;\n    }\n\n    samePosition(pos1, pos2) {\n        return pos1[0] == pos2[0] && pos1[1] == pos2[1];\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        this.ea.subscribe('keyPressed', response => {\n            if (response.startsWith('Arrow') && this.snake.turnSteps == 0) {\n                this.snake.turnSteps = 1;\n                switch (response) {\n                    case 'ArrowRight': direction = 0;\n                        break;\n                    case 'ArrowDown': direction = 1;\n                        break;\n                    case 'ArrowLeft': direction = 2;\n                        break;\n                    case 'ArrowUp': direction = 3;\n                        break;\n                }\n                // prevent going in opposite direction\n                (((direction + 2) % 4) !== this.snake.direction) && (this.snake.direction = direction);\n            }\n        });\n    }\n\n    setCenter() {\n        this.center = this.screenService.canvasCenter;\n    }\n\n    minTurnSteps() {\n        return Math.ceil(this.snake.segmentSize / this.snake.stepSize) + 1;\n    }\n\n    initSnake() {\n        this.snake.segmentSize = this.screenService.spriteSize;\n        this.halfSprite = Math.round(this.snake.segmentSize / 2);\n        this.accelleration = 1.01;\n        this.score = 0;\n        this.snake.deadSegments = [];\n        this.snake.stepSize = 16;\n        this.snake.segments = [];\n        this.snake.turnSteps = 0;\n        let segment = [this.center.x, this.center.y];\n        this.snake.segments.push(segment);\n    }\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { SnakeService } from './snake-service';\nimport { SnackService } from './snack-service';\nimport { ScreenService } from './screen-service';\nimport { ScoreService } from './score-service';\n\n@inject(EventAggregator, SnakeService, SnackService, ScreenService, ScoreService)\n\nexport class TimingService {\n    constructor(eventAggregator, snakeService, snackService, screenService, scoreService) {\n        this.ea = eventAggregator;\n        this.snakeService = snakeService;\n        this.snackService = snackService;\n        this.screenService = screenService;\n        this.scoreService = scoreService;\n\n        this.crawling = false;\n        this.steps = 0;\n        this.speed = 1;\n        this.fallTimerHandle = null;\n        this.stepTimerHandle = null;\n        this.pause = false;\n\n        this.baseGrowInterval = 10;\n        this.baseScoreInterval = 10;\n        this.baseSnackInterval = 10;\n        this.baseSpeedupInterval = 100;\n        this.maxStepInterval = 400;\n        this.minStepInterval = 10;\n        this.dropInterval = 0;\n        this.snackDuration = 15000;\n\n        this.methods = {\n            axe: () => {\n                void (0)\n            },\n            beer: () => {\n                this.growSlower();\n            },\n            bunny: () => {\n                this.speedUp();\n            },\n            diamond: () => {\n                this.scoreService.update(10000);\n            },\n            gold: () => {\n                this.scoreService.update(1000);\n            },\n            ruby: () => {\n                this.multiPlyScore()\n            },\n            skull: () => {\n                this.dropSnake();\n            },\n            snail: () => {\n                this.slowDown();\n            },\n            trash: () => {\n                this.snackService.initSnacks();\n            },\n            viagra: () => {\n                this.growHarder();\n            }\n        }\n\n        this.setSubscribers();\n    }\n\n    startGame() {\n        this.resetIntervals();\n        this.scoreService.initScore();\n        this.snakeService.initSnake();\n        this.snackService.initSnacks();\n        this.crawling = true;\n        this.resumeGame();\n    }\n\n    resumeGame() {\n        this.stepTimerHandle = setInterval(() => {\n            this.drawScreen()\n        }, this.stepInterval);\n    }\n\n    drawScreen() {\n        this.steps += 1;\n        let grow = (this.steps % this.growInterval == 0);\n        grow && this.ea.publish('grow', this.snakeService.snake.segments.length);\n        (this.steps % this.speedupInterval == 0) && this.speedUp();\n        (this.steps % this.snackInterval == 0) && this.snackService.addSnack();\n        this.snakeService.step(grow);\n        this.screenService.fadeArena();\n        this.screenService.drawSnacks(this.snackService.snacks);\n        this.screenService.drawSnake(this.snakeService.snake);\n        this.scoreService.update(this.snakeService.snake.segments.length);\n    }\n\n    dropSnake() {\n        this.fallTimerHandle = setInterval(() => {\n            this.snakeService.fallDown();\n            this.screenService.fadeArena();\n            this.screenService.drawSnake(this.snakeService.snake);\n        }, this.dropInterval);\n    }\n\n    speedUp() {\n        if (this.stepInterval > this.minStepInterval) {\n            this.speed += 1;\n            this.clearTimedEvents();\n            this.stepInterval -= 40;\n            this.resumeGame();\n            this.ea.publish('speed', this.speed);\n        }\n    }\n\n    slowDown() {\n        if (this.stepInterval < this.maxStepInterval) {\n            this.speed -= 1;\n            this.clearTimedEvents();\n            this.stepInterval += 40;\n            this.resumeGame();\n            this.ea.publish('speed', this.speed);\n        }\n    }\n\n    growSlower() {\n        this.growInterval += 5;\n        setTimeout(() => {\n            this.growInterval -= 5;\n        }, this.snackDuration);\n    }\n\n    growHarder() {\n        if (this.growInterval > this.baseGrowInterval) {\n            this.growInterval -= 5;\n            setTimeout(() => {\n                this.growInterval += 5;\n            }, this.snackDuration);\n        }\n    }\n\n    multiPlyScore() {\n        this.scoreService.setMultiplier();\n        setTimeout(() => {\n            this.scoreService.resetMultiplier();\n        }, this.snackDuration);\n    }\n\n    clearTimedEvents() {\n        clearInterval(this.stepTimerHandle);\n        clearInterval(this.fallTimerHandle);\n    }\n\n    pauseGame() {\n        if (this.crawling) {\n            this.pause = !this.pause;\n            if (this.pause) {\n                this.clearTimedEvents();\n            } else {\n                this.resumeGame();\n            }\n        }\n    }\n\n    restart() {\n        if (!this.pause) {\n            this.clearTimedEvents();\n            this.startGame();\n        }\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        this.ea.subscribe('keyPressed', response => {\n            switch (response) {\n                case 'Enter': this.ea.publish('start');\n                    break;\n                case ' ': this.ea.publish('pause');\n                    break;\n            }\n        });\n        this.ea.subscribe('die', response => {\n            this.clearTimedEvents();\n            this.dropSnake();\n        });\n        this.ea.subscribe('start', response => {\n            this.restart();\n        });\n        this.ea.subscribe('pause', response => {\n            this.pauseGame();\n        });\n        this.ea.subscribe('gameOver', response => {\n            this.clearTimedEvents();\n        });\n        this.ea.subscribe('snack', response => {\n            let method = response.split(':')[0].toLowerCase();\n            this.methods[method]();\n        });\n    }\n\n    resetIntervals() {\n        this.stepInterval = this.maxStepInterval;\n        this.scoreInterval = this.baseSoreInterval;\n        this.growInterval = this.baseGrowInterval;\n        this.speedupInterval = this.baseSpeedupInterval;\n        this.snackInterval = this.baseSnackInterval;\n        this.speed = 1;\n    }\n\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}