{"version":3,"sources":["app.js","environment.js","main.js","components/game-screen.js","components/restart-overlay.js","components/status.js","services/keystroke-service.js","services/screen-service.js","services/snack-service.js","services/snake-service.js","services/timing-service.js","resources/index.js"],"names":["App","keystrokeService","timingService","eventAggregator","ea","message","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","GameScreenCustomElement","screenService","snakeService","snackService","snakeImages","snackImages","spriteSize","snakeParts","snacks","roundToSpriteSize","size","Math","floor","attached","self","$arena","$","$body","$snakeImages","targetWidth","width","targetHeight","height","each","push","setDomVars","setCenter","RestartOverlayCustomElement","showOverlay","firstGame","pause","publish","addEventListeners","subscribe","StatusCustomElement","resetVars","speed","response","length","score","snack","setTimeout","KeystrokeService","acceptMoves","myKeypressCallback","keypressInput","bind","setSubscribers","keysOff","keysOn","document","addEventListener","e","keycode","event","key","ScreenService","halfSprite","snackSize","halfSnackSize","canvasCenter","drawSnake","snake","type","i","segments","segment","ctx","save","translate","rotate","direction","PI","drawImage","restore","drawSnack","position","index","drawSnacks","onBoard","forEach","gameScreen","fadeArena","fillStyle","fillRect","canvas","getContext","clientWidth","clientHeight","x","y","limits","right","bottom","left","top","SnackService","newSnack","name","addSnack","random","images","className","initStuff","SnakeService","directions","deadSegments","step","grow","turnSteps","advanceHead","pop","head","slice","segmentSize","unshift","hitWall","hitSnake","wallHit","samePosition","pos1","pos2","dropSnake","indexOf","newY","hitSnack","overlap","snackPos","headPos","dx","abs","dy","xOverlap","yOverlap","splice","methods","cutSnake","halfSnake","growHarder","growInterval","restartIntervals","growSlower","score100","scoreUpdate","score10","scoreX10","scoreInterval","trashSnacks","slowdown","console","log","stepInterval","die","crawling","clearTimedEvents","fall","amount","startsWith","center","minTurnSteps","ceil","stepSize","initSnake","round","accelleration","TimingService","steps","fallTimerHandle","stepTimerHandle","startGame","resetIntervals","resumeGame","setInterval","drawScreen","speedupInterval","speedUp","dropInterval","clearInterval","pauseGame","restart"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport $ from 'jquery';\nimport { KeystrokeService } from './services/keystroke-service';\nimport { TimingService } from './services/timing-service';\n\n@inject(KeystrokeService, TimingService, EventAggregator)\n\nexport class App {\n\n    constructor(keystrokeService, timingService, eventAggregator) {\n        this.keystrokeService = keystrokeService;\n        this.timingService = timingService;\n        this.ea = eventAggregator;\n        this.message = 'Snake by ashWare';\n    }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport { ScreenService } from '../services/screen-service';\nimport { SnakeService } from '../services/snake-service';\nimport { SnackService } from '../services/snack-service';\n\n@inject(EventAggregator, ScreenService, SnakeService, SnackService)\n\nexport class GameScreenCustomElement {\n\n    constructor(eventAggregator, screenService, snakeService, snackService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snakeService = snakeService;\n        this.snackService = snackService;\n        this.snakeImages = [];\n        this.snackImages = [];\n        this.spriteSize = 16;\n        // images with these names.jpg should exist in /images/..\n        this.snakeParts = this.snakeService.snakeParts;\n        this.snacks = this.snackService.snacks;\n    }\n\n    roundToSpriteSize(size) {\n        return Math.floor(size / this.spriteSize) * this.spriteSize;\n    }\n\n    attached() {\n        let self = this;\n        this.$arena = $('.arena');\n        let $body = $('body');\n        let $snakeImages = $('.snakeImages img');\n        let targetWidth = this.roundToSpriteSize($body.width() - 48);\n        let targetHeight = this.roundToSpriteSize($body.height() - 48);\n        this.$arena.width(targetWidth);\n        this.$arena.height(targetHeight)\n        $snakeImages.each(function () {\n            self.snakeImages.push(this);\n        });\n        $('.snackImages img').each(function () {\n            self.snackImages.push(this);\n        });\n        $(() => {\n            this.screenService.setDomVars(this.$arena, this.snakeImages, this.snackImages);\n            this.snakeService.setCenter();\n        });\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class RestartOverlayCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.showOverlay = true;\n        this.firstGame = true;\n        this.pause = false;\n    }\n\n    start() {\n        this.ea.publish('start');\n        this.showOverlay = false;\n        this.firstGame = false;\n    }\n\n    addEventListeners() {\n        this.ea.subscribe('gameOver', response => {\n            this.showOverlay = true;\n        });\n        this.ea.subscribe('start', response => {\n            this.showOverlay = false;\n        });\n        this.ea.subscribe('pause', response => {\n            this.pause = !this.pause;\n        });\n    }\n\n    attached() {\n        this.addEventListeners();\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class StatusCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.resetVars();\n    }\n\n    addEventListeners() {\n        this.ea.subscribe('speed', response => {\n            this.speed = response;\n        });\n        this.ea.subscribe('grow', response => {\n            this.length = response;\n        });\n        this.ea.subscribe('start', response => {\n            this.resetVars();\n        });\n        this.ea.subscribe('score', response => {\n            this.score = response;\n        });\n        this.ea.subscribe('snack', response => {\n            this.snack = response;\n            setTimeout(() => {\n                this.snack = '';\n            }, 15000);\n        });\n        this.ea.subscribe('die', response => {\n            this.snack = response;\n        });\n\n    }\n\n    resetVars() {\n        this.speed = 0;\n        this.length = 1;\n        this.score = 0;\n        this.snack = '';\n    }\n\n    attached() {\n        this.addEventListeners();\n    }\n\n}\n","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class KeystrokeService {\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.acceptMoves = true;\n        this.myKeypressCallback = this.keypressInput.bind(this);\n        this.setSubscribers();\n    }\n\n    keysOff() {\n        this.acceptMoves = false;\n    }\n\n    keysOn() {\n        this.acceptMoves = true;\n    }\n\n    setSubscribers() {\n        document.addEventListener('keydown', this.myKeypressCallback, false);\n        this.ea.subscribe('keysOff', response => {\n            this.keysOff();\n        });\n        this.ea.subscribe('keysOn', response => {\n            this.keysOn();\n        });\n    }\n\n    // This function is called by the aliased method\n    keypressInput(e) {\n        // console.log(e);\n        let keycode = event.key; // also for cross-browser compatible\n        (this.acceptMoves) && this.ea.publish('keyPressed', keycode);\n    }\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class ScreenService {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.spriteSize = 16;\n        this.halfSprite = this.spriteSize / 2;\n        this.snackSize = 24;\n        this.halfSnackSize = this.snackSize / 2;\n        this.canvasCenter = {};\n    }\n\n    drawSnake(snake) {\n        let type = 0;\n        for (var i = 0; i < snake.segments.length; i++) {\n            let segment = snake.segments[i];\n            this.ctx.save();\n            this.ctx.translate(segment[0], segment[1]);\n            (segment.type !== 1) && this.ctx.rotate(snake.direction * Math.PI / 2);\n            this.ctx.drawImage(this.snakeImages[type], -this.halfSprite, -this.halfSprite);\n            this.ctx.restore();\n            type = 1;\n        }\n    }\n\n    drawSnack(snack) {\n        this.ctx.save();\n        // ctx.strokeStyle = 'goldenrod';\n        // ctx.rect(snack.position[0], snack.position[1], this.snackSize, this.snackSize);\n        // ctx.stroke();\n        this.ctx.translate(snack.position[0], snack.position[1]);\n        // snacks are 2x larger\n        this.ctx.drawImage(this.snackImages[snack.index], 0, 0, this.snackSize, this.snackSize);\n        this.ctx.restore();\n    }\n\n    drawSnacks() {\n        this.snacks.onBoard.forEach((snack) => {\n            gameScreen.drawSnack(snack);\n        })\n    }\n\n    fadeArena() {\n        this.ctx.fillStyle = 'rgba(0,0,0,0.95)';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    roundToSpriteSize(size) {\n        return Math.floor(size / this.spriteSize) * this.spriteSize + this.halfSprite;\n    }\n\n    setDomVars($arena, snakeImages, snackImages) {\n        this.canvas = $('#arena')[0];\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = this.canvas.clientWidth;\n        this.canvas.height = this.canvas.clientHeight;\n        this.canvasCenter = {\n            x: this.roundToSpriteSize($arena.width() / 2),\n            y: this.roundToSpriteSize($arena.height() / 2)\n        };\n        this.limits = {\n            right: this.canvas.width,\n            bottom: this.canvas.height,\n            left: 0,\n            top: 0\n        };\n        this.snakeImages = snakeImages;\n        this.snackImages = snackImages;\n    }\n\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class SnackService {\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.snacks = [\n            'axe',\n            'beer',\n            'bunny',\n            'diamond',\n            'gold',\n            'ruby',\n            'skull',\n            'snail',\n            'trash',\n            'viagra'\n        ]\n    }\n\n    newSnack(x, y, name, i) {\n        let snack = {\n            position: [x, y],\n            name: name,\n            index: i\n        }\n        return snack;\n    }\n\n    addSnack() {\n        let snack = Math.floor(Math.random() * this.snacks.images.length);\n        let name = this.snacks.images[snack].className;\n        // compensate for border width (24);\n        let x = Math.floor(Math.random() * this.canvas.width - 24) + 24;\n        let y = Math.floor(Math.random() * this.canvas.height - 24) + 24;\n        this.snacks.onBoard.push(this.newSnack(x, y, name, snack));\n    }\n\n    initStuff() {\n        this.snacks.onBoard = [];\n    }\n\n\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { ScreenService } from './screen-service'\n\n@inject(EventAggregator, ScreenService)\n\nexport class SnakeService {\n    constructor(eventAggregator, screenService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snakeParts = [\n            'head',\n            'body',\n            'tail'\n        ];\n        this.snake = {\n            direction: 0,\n            directions: [\n                [1, 0],\n                [0, 1],\n                [-1, 0],\n                [0, -1],\n                [0, 0]\n            ],\n            segments: [],\n            deadSegments: []\n        }\n        this.setSubscribers();\n    }\n\n    step(grow) {\n        // limit the rate at which turns are accepted\n        (this.snake.turnSteps > 0) && this.snake.turnSteps--;\n        this.advanceHead();\n        (!grow) && (this.snake.segments.pop());\n        // let snack = this.hitSnack();\n        // call the function named with value of snack\n        // (snack !== '') && this[snack]();\n        // (this.hitSnake() || this.hitWall()) && this.die();\n    }\n\n    advanceHead() {\n        let head = this.snake.segments[0].slice();\n        head[0] += this.snake.directions[this.snake.direction][0] * this.snake.segmentSize;\n        head[1] += this.snake.directions[this.snake.direction][1] * this.snake.segmentSize;\n        this.snake.segments.unshift(head);\n        this.hitWall();\n        this.hitSnake();\n    }\n\n    hitWall() {\n        let head = this.snake.segments[0];\n        let wallHit =\n            head[0] >= this.screenService.limits.right - this.halfSprite ||\n            head[0] <= this.screenService.limits.left + this.halfSprite ||\n            head[1] >= this.screenService.limits.bottom - this.halfSprite ||\n            head[1] <= this.screenService.limits.top + this.halfSprite;\n        wallHit && (this.ea.publish('die', 'You hit a wall'));\n    }\n\n    hitSnake() {\n        let head = this.snake.segments[0];\n        let samePosition = function (pos1, pos2) {\n            return pos1[0] == pos2[0] && pos1[1] == pos2[1];\n        }\n        for (let i = 3; i < this.snake.segments.length - 1; i++) {\n            let segment = this.snake.segments[i];\n            if (samePosition(segment, head)) {\n                this.ea.publish('die', 'You tried to bite yourself that&rsquo;s deadly');\n                return true;\n            }\n        }\n        return false;\n    }\n\n    dropSnake() {\n        for (let i = 0; i < this.snake.segments.length; i++) {\n            if (this.snake.deadSegments.indexOf(i) < 0) {\n                let segment = this.snake.segments[i];\n                let newY = (segment[1] + 1) * 1.05;\n                if (newY <= this.screenService.limits.bottom) {\n                    segment[1] = newY;\n                } else {\n                    this.snake.deadSegments.push(i);\n                }\n            }\n            if (this.snake.deadSegments.length >= this.snake.segments.length) {\n                this.ea.publish('gameOver');\n            }\n        }\n    }\n\n    hitSnack() {\n        let self = this;\n        let head = this.snake.segments[0];\n        function overlap(snackPos, headPos) {\n            let dx = Math.abs(snackPos[0] - headPos[0]);\n            let dy = Math.abs(snackPos[1] - headPos[1]);\n            let xOverlap = dx < (self.snackSize + self.snake.segmentSize) / 2;\n            let yOverlap = dy < (self.snackSize + self.snake.segmentSize) / 2;\n            return xOverlap && yOverlap;\n        }\n        for (let i = 0; i < this.snacks.onBoard.length - 1; i++) {\n            let snack = this.snacks.onBoard[i];\n            if (overlap(snack.position, head.position)) {\n                (i > -1) && this.snacks.onBoard.splice(i, 1);\n                return this.snacks.methods[snack.name];\n            }\n        }\n        return '';\n    }\n\n    cutSnake() {\n        let halfSnake = Math.floor(this.snake.segments.length / 2)\n        this.snake.segments.splice(-halfSnake);\n        this.ea.publish('snack', 'Axe: you lost half of your length');\n    }\n\n    growHarder() {\n        if (this.growInterval > 500) {\n            this.growInterval -= 500;\n            this.restartIntervals();\n            setTimeout(() => {\n                this.growInterval += 500;\n                this.restartIntervals();\n            }, 15000);\n            this.ea.publish('snack', 'Blue pill: growing harder for 15 seconds');\n        }\n    }\n    growSlower() {\n        this.growInterval += 500;\n        this.restartIntervals();\n        setTimeout(() => {\n            this.growInterval -= 500;\n            this.restartIntervals();\n        }, 15000);\n        this.ea.publish('snack', 'Beer: growing slower for 15 seconds');\n    }\n    score100() {\n        this.scoreUpdate(1000);\n        this.ea.publish('snack', 'Diamond: you scored 1000 points');\n    }\n    score10() {\n        this.scoreUpdate(100);\n        this.ea.publish('snack', 'Gold: you scored 100 points');\n    }\n    scoreX10() {\n        if (this.scoreInterval > 250) {\n            this.scoreInterval -= 250;\n            setTimeout(() => {\n                this.scoreInterval += 250;\n            }, 15000);\n            this.ea.publish('snack', 'Ruby: scoring faster for 15 seconds');\n        }\n    }\n    trashSnacks() {\n        this.snacks.onBoard = [];\n        this.ea.publish('snack', 'Trash: you trashed all extra&rsquo;s');\n    }\n\n    slowdown() {\n        console.log('slowdown');\n        if (this.stepInterval < 7) {\n            this.stepInterval += 1;\n            this.restartIntervals();\n            this.ea.publish('speedChange', -1);\n        }\n        this.ea.publish('snack', 'Snail: running slower');\n    }\n\n    die() {\n        this.keysOff();\n        this.crawling = false;\n        this.clearTimedEvents()\n        this.fall();\n    }\n\n    scoreUpdate(amount) {\n        if (amount) {\n            this.score += amount;\n        } else {\n            this.score += this.snake.segments.length;\n        }\n        this.ea.publish('score', this.score);\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        this.ea.subscribe('keyPressed', response => {\n            if (response.startsWith('Arrow') && this.snake.turnSteps == 0) {\n                this.snake.turnSteps = 1;\n                switch (response) {\n                    case 'ArrowRight': direction = 0;\n                        break;\n                    case 'ArrowDown': direction = 1;\n                        break;\n                    case 'ArrowLeft': direction = 2;\n                        break;\n                    case 'ArrowUp': direction = 3;\n                        break;\n                }\n                // prevent going in opposite direction\n                (((direction + 2) % 4) !== this.snake.direction) && (this.snake.direction = direction);\n            }\n        });\n    }\n\n    setCenter() {\n        this.center = this.screenService.canvasCenter;\n    }\n\n    minTurnSteps() {\n        return Math.ceil(this.snake.segmentSize / this.snake.stepSize) + 1;\n    }\n\n    initSnake() {\n        this.snake.segmentSize = this.screenService.spriteSize;\n        this.halfSprite = Math.round(this.snake.segmentSize / 2);\n        this.accelleration = 1.01;\n        this.score = 0;\n        this.snake.deadSegments = [];\n        this.snake.stepSize = 16;\n        this.snake.segments = [];\n        this.snake.turnSteps = 0;\n        let segment = [this.center.x, this.center.y];\n        this.snake.segments.push(segment);\n    }\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { SnakeService } from './snake-service';\nimport { ScreenService } from './screen-service';\n\n@inject(EventAggregator, SnakeService, ScreenService)\n\nexport class TimingService {\n    constructor(eventAggregator, snakeService, screenService) {\n        this.ea = eventAggregator;\n        this.snakeService = snakeService;\n        this.screenService = screenService;\n\n        this.crawling = false;\n        this.steps = 0;\n        this.speed = 1;\n        this.fallTimerHandle = null;\n        this.stepTimerHandle = null;\n        this.pause = false;\n\n        this.setSubscribers();\n    }\n\n    startGame() {\n        this.resetIntervals();\n        this.snakeService.initSnake(1);\n        this.crawling = true;\n        this.resumeGame();\n    }\n\n    resumeGame() {\n        this.stepTimerHandle = setInterval(() => {\n            this.drawScreen()\n        }, this.stepInterval);\n    }\n\n    drawScreen() {\n        this.steps += 1;\n        let grow = (this.steps % this.growInterval == 0);\n        this.snakeService.step(grow);\n        this.screenService.fadeArena();\n        this.screenService.drawSnake(this.snakeService.snake);\n        (this.steps % this.speedupInterval == 0) && (this.speedUp());\n        grow && this.ea.publish('grow', this.snakeService.snake.segments.length);\n    }\n\n    speedUp() {\n        if (this.stepInterval > 40) {\n            this.speed += 1;\n            this.clearTimedEvents();\n            this.stepInterval -= 40;\n            this.resumeGame();\n            this.ea.publish('speed', this.speed);\n        }\n    }\n\n    dropSnake() {\n        this.fallTimerHandle = setInterval(() => {\n            this.snakeService.dropSnake();\n            this.screenService.fadeArena();\n            this.screenService.drawSnake(this.snakeService.snake);\n        }, this.dropInterval);\n    }\n\n    clearTimedEvents() {\n        clearInterval(this.stepTimerHandle);\n        clearInterval(this.fallTimerHandle);\n        // clearInterval(this.snackTimerHandle);\n        // clearInterval(this.scoreTimerHandle);\n    }\n\n    pauseGame() {\n        if (this.crawling) {\n            this.pause = !this.pause;\n            if (this.pause) {\n                this.clearTimedEvents();\n            } else {\n                this.resumeGame();\n            }\n        }\n    }\n\n    restart() {\n        if (!this.pause) {\n            this.clearTimedEvents();\n            this.startGame();\n        }\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        this.ea.subscribe('keyPressed', response => {\n            switch (response) {\n                case 'Enter': this.ea.publish('start');\n                    break;\n                case ' ': this.ea.publish('pause');\n                    break;\n            }\n        });\n        this.ea.subscribe('die', response => {\n            this.clearTimedEvents();\n            this.dropSnake();\n        });\n        this.ea.subscribe('start', response => {\n            this.restart();\n        });\n        this.ea.subscribe('pause', response => {\n            this.pauseGame();\n        });\n        this.ea.subscribe('gameOver', response => {\n            this.clearTimedEvents();\n        });\n\n    }\n\n    resetIntervals() {\n        this.stepInterval = 400;\n        this.scoreInterval = 10;\n        this.growInterval = 10;\n        this.speedupInterval = 10;\n        this.dropInterval = 0;\n        // this.snackInterval = 2500;\n        this.speed = 1;\n    }\n\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}