{"version":3,"sources":["app.js","environment.js","main.js","components/game-screen.js","components/restart-overlay.js","components/status.js","services/keystroke-service.js","services/screen-service.js","services/snack-service.js","services/snake-service.js","services/timing-service.js","resources/index.js"],"names":["App","keystrokeService","timingService","eventAggregator","ea","message","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","GameScreenCustomElement","screenService","snakeService","snackService","snakeImages","snackImages","snakeParts","snacks","attached","self","$arena","$","each","push","setDomVars","setCenter","RestartOverlayCustomElement","showOverlay","firstGame","pause","publish","addEventListeners","subscribe","StatusCustomElement","speed","length","score","snack","response","setTimeout","KeystrokeService","acceptMoves","myKeypressCallback","keypressInput","bind","setSubscribers","keysOff","keysOn","document","addEventListener","e","keycode","event","key","ScreenService","spriteSize","halfSprite","snackSize","halfSnackSize","canvasCenter","drawSnake","snake","type","i","segments","segment","ctx","save","translate","position","rotate","direction","Math","PI","drawImage","restore","drawSnack","index","drawSnacks","onBoard","forEach","gameScreen","fadeArena","fillStyle","fillRect","canvas","width","height","getContext","clientWidth","clientHeight","wallSize","parseInt","css","x","y","limits","right","bottom","left","top","SnackService","newSnack","name","addSnack","floor","random","images","className","initStuff","SnakeService","directions","allDown","stepSize","step","turnSteps","advanceSegment","savePosition","preceder","posHistory","slice","accellerate","accelleration","shift","grow","lastSegmentIndex","tail","newTail","emptyHistory","doubleSpeed","j","splice","fallNdraw","hitFloor","deadSegments","gameOver","hitWall","head","wallHit","hitSnake","overlap","segPos","headPos","dx","abs","dy","xOverlap","yOverlap","hitSnack","snackPos","segmentSize","methods","cutSnake","halfSnake","growHarder","growInterval","restartIntervals","growSlower","score100","scoreUpdate","score10","scoreX10","scoreInterval","trashSnacks","slowdown","console","log","stepInterval","die","crawling","clearTimedEvents","fall","amount","startsWith","minTurnSteps","center","round","history","ceil","initSnake","TimingService","steps","fallTimerHandle","stepTimerHandle","startGame","resetIntervals","resumeGame","setInterval","drawScreen","speedupInterval","speedUp","clearInterval","growTimerHandle","speedupTimerHandle","pauseGame","restart"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport $ from 'jquery';\nimport { KeystrokeService } from './services/keystroke-service';\nimport { TimingService } from './services/timing-service';\n\n@inject(KeystrokeService, TimingService, EventAggregator)\n\nexport class App {\n\n    constructor(keystrokeService, timingService, eventAggregator) {\n        this.keystrokeService = keystrokeService;\n        this.timingService = timingService;\n        this.ea = eventAggregator;\n        this.message = 'Snake by ashWare';\n    }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\nimport { ScreenService } from '../services/screen-service';\nimport { SnakeService } from '../services/snake-service';\nimport { SnackService } from '../services/snack-service';\n\n@inject(EventAggregator, ScreenService, SnakeService, SnackService)\n\nexport class GameScreenCustomElement {\n\n    constructor(eventAggregator, screenService, snakeService, snackService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snakeService = snakeService;\n        this.snackService = snackService;\n        this.snakeImages = [];\n        this.snackImages = [];\n        // images with these names.jpg should exist in /images/..\n        this.snakeParts = this.snakeService.snakeParts;\n        this.snacks = this.snackService.snacks;\n    }\n\n    attached() {\n        let self = this;\n        this.$arena = $('.arena');\n        $('.snakeImages img').each(function () {\n            self.snakeImages.push(this);\n        });\n        $('.snackImages img').each(function () {\n            self.snackImages.push(this);\n        });\n        $(() => {\n            this.screenService.setDomVars(this.$arena, this.snakeImages, this.snackImages);\n            this.snakeService.setCenter();\n        });\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class RestartOverlayCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.showOverlay = true;\n        this.firstGame = true;\n        this.pause = false;\n    }\n\n    start() {\n        this.ea.publish('start');\n        this.showOverlay = false;\n        this.firstGame = false;\n    }\n\n    addEventListeners() {\n        this.ea.subscribe('gameOver', response => {\n            this.showOverlay = true;\n        });\n        this.ea.subscribe('start', response => {\n            this.showOverlay = false;\n        });\n        this.ea.subscribe('pause', response => {\n            this.pause = !this.pause;\n        });\n    }\n\n    attached() {\n        this.addEventListeners();\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class StatusCustomElement {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.speed = 0;\n        this.length = 2;\n        this.score = 0;\n        this.snack = '';\n    }\n\n    addEventListeners() {\n        this.ea.subscribe('speedChange', response => {\n            this.speed = response;\n        });\n        this.ea.subscribe('grow', response => {\n            this.length = response;\n        });\n        this.ea.subscribe('restart', response => {\n            this.length = 1;\n            this.speed = 0;\n        });\n        this.ea.subscribe('score', response => {\n            this.score = response;\n        });\n        this.ea.subscribe('snack', response => {\n            this.snack = response;\n            setTimeout(() => {\n                this.snack = '';\n            }, 15000);\n        });\n\n    }\n\n    attached() {\n        this.addEventListeners();\n    }\n\n}\n","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class KeystrokeService {\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.acceptMoves = true;\n        this.myKeypressCallback = this.keypressInput.bind(this);\n        this.setSubscribers();\n    }\n\n    keysOff() {\n        this.acceptMoves = false;\n    }\n\n    keysOn() {\n        this.acceptMoves = true;\n    }\n\n    setSubscribers() {\n        document.addEventListener('keydown', this.myKeypressCallback, false);\n        this.ea.subscribe('keysOff', response => {\n            this.keysOff();\n        });\n        this.ea.subscribe('keysOn', response => {\n            this.keysOn();\n        });\n    }\n\n    // This function is called by the aliased method\n    keypressInput(e) {\n        // console.log(e);\n        let keycode = event.key; // also for cross-browser compatible\n        (this.acceptMoves) && this.ea.publish('keyPressed', keycode);\n    }\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class ScreenService {\n\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.spriteSize = 16;\n        this.halfSprite = this.spriteSize / 2;\n        this.snackSize = 24;\n        this.halfSnackSize = this.snackSize / 2;\n        this.canvasCenter = {};\n    }\n\n    drawSnake(snake) {\n        let type = 0;\n        for (var i = 0; i < snake.segments.length; i++) {\n            let segment = snake.segments[i];\n            this.ctx.save();\n            this.ctx.translate(segment.position[0], segment.position[1]);\n            (segment.type !== 1) && this.ctx.rotate(snake.direction * Math.PI / 2);\n            this.ctx.drawImage(this.snakeImages[type], -this.halfSprite, -this.halfSprite);\n            this.ctx.restore();\n            type = 1;\n        }\n    }\n\n    drawSnack(snack) {\n        this.ctx.save();\n        // ctx.strokeStyle = 'goldenrod';\n        // ctx.rect(snack.position[0], snack.position[1], this.snackSize, this.snackSize);\n        // ctx.stroke();\n        this.ctx.translate(snack.position[0], snack.position[1]);\n        // snacks are 2x larger\n        this.ctx.drawImage(this.snackImages[snack.index], 0, 0, this.snackSize, this.snackSize);\n        this.ctx.restore();\n    }\n\n    drawSnacks() {\n        this.snacks.onBoard.forEach((snack) => {\n            gameScreen.drawSnack(snack);\n        })\n    }\n\n    fadeArena() {\n        this.ctx.fillStyle = 'rgba(0,0,0,0.4)';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    setDomVars($arena, snakeImages, snackImages) {\n        this.canvas = $('#arena')[0];\n        this.ctx = this.canvas.getContext('2d');\n        this.canvas.width = this.canvas.clientWidth;\n        this.canvas.height = this.canvas.clientHeight;\n        this.wallSize = parseInt($arena.css('borderWidth'), 10);\n        this.canvasCenter = {\n            x: parseInt($arena.width() / 2, 10),\n            y: parseInt($arena.height() / 2, 10)\n        };\n        this.limits = {\n            right: this.canvas.width - this.wallSize,\n            bottom: this.canvas.height - this.wallSize,\n            left: this.wallSize,\n            top: this.wallSize\n        };\n        this.snakeImages = snakeImages;\n        this.snackImages = snackImages;\n    }\n\n}","import {\n    inject\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class SnackService {\n    constructor(eventAggregator) {\n        this.ea = eventAggregator;\n        this.snacks = [\n            'axe',\n            'beer',\n            'bunny',\n            'diamond',\n            'gold',\n            'ruby',\n            'skull',\n            'snail',\n            'trash',\n            'viagra'\n        ]\n        // this.snacks = {\n        //     images: [],\n        //     onBoard: [],\n        //     methods: {\n        //         'axe': 'cutSnake',\n        //         'beer': 'growSlower',\n        //         'bunny': 'speedup',\n        //         'diamond': 'score100',\n        //         'gold': 'score10',\n        //         'ruby': 'scoreX10',\n        //         'skull': 'die',\n        //         'snail': 'slowdown',\n        //         'trash': 'trashSnacks',\n        //         'viagra': 'growHarder'\n        //         //'weed': 'mixSnacks'\n        //     }\n        // }\n    }\n\n    newSnack(x, y, name, i) {\n        let snack = {\n            position: [x, y],\n            name: name,\n            index: i\n        }\n        return snack;\n    }\n\n    addSnack() {\n        let snack = Math.floor(Math.random() * this.snacks.images.length);\n        let name = this.snacks.images[snack].className;\n        // compensate for border width (24);\n        let x = Math.floor(Math.random() * this.canvas.width - 24) + 24;\n        let y = Math.floor(Math.random() * this.canvas.height - 24) + 24;\n        this.snacks.onBoard.push(this.newSnack(x, y, name, snack));\n    }\n\n    initStuff() {\n        this.snacks.onBoard = [];\n    }\n\n\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { ScreenService } from './screen-service'\n\n@inject(EventAggregator, ScreenService)\n\nexport class SnakeService {\n    constructor(eventAggregator, screenService) {\n        this.ea = eventAggregator;\n        this.screenService = screenService;\n        this.snakeParts = [\n            'head',\n            'body',\n            'tail'\n        ];\n        this.snake = {\n            direction: 0,\n            directions: [\n                [1, 0],\n                [0, 1],\n                [-1, 0],\n                [0, -1],\n                [0, 0]\n            ]\n        }\n        this.setSubscribers();\n    }\n\n    allDown() {\n        this.snake.stepSize = 1;\n        this.snake.segments.forEach((segment) => {\n            segment.direction = 1;\n        });\n    }\n\n    step() {\n        // limit the rate at which turns are accepted\n        (this.snake.turnSteps > 0) && this.snake.turnSteps--;\n        this.advanceSegment(0);\n        for (var i = 1; i < this.snake.segments.length; i++) {\n            let segment = this.snake.segments[i];\n            this.savePosition(segment);\n            let preceder = this.snake.segments[i - 1];\n            segment.position = preceder.posHistory[0].slice();\n        }\n        // let snack = this.hitSnack();\n        // call the function named with value of snack\n        // (snack !== '') && this[snack]();\n        // (this.hitSnake() || this.hitWall()) && this.die();\n    }\n\n    advanceSegment(i, accellerate) {\n        let segment = this.snake.segments[i];\n        this.savePosition(segment);\n        // when falling accellerate = true\n        (accellerate) && (this.snake.stepSize *= this.accelleration);\n        segment.position[0] += parseInt(this.snake.directions[this.snake.direction][0] * this.snake.stepSize, 10);\n        segment.position[1] += parseInt(this.snake.directions[this.snake.direction][1] * this.snake.stepSize, 10);\n    }\n\n    savePosition(segment) {\n        segment.posHistory.shift();\n        segment.posHistory.push(segment.position.slice());\n    }\n\n    grow() {\n        let lastSegmentIndex = this.snake.segments.length - 1;\n        let tail = this.snake.segments[lastSegmentIndex];\n        let newTail = {};\n        newTail.posHistory = this.emptyHistory();\n        newTail.position = tail.posHistory[0].slice();\n        this.savePosition(newTail);\n        this.snake.segments.push(newTail);\n        this.ea.publish('grow', this.snake.segments.length);\n    }\n\n    doubleSpeed() {\n        if (this.snake.stepSize <= this.halfSprite) {\n            this.snake.stepSize *= 2;\n            for (let i = 0; i < this.snake.segments.length; i++) {\n                let segment = this.snake.segments[i];\n                let j = 0;\n                while (j < segment.posHistory.length) {\n                    segment.posHistory.splice(j, 1);\n                    j += 1;\n                }\n            }\n        }\n        return this.snake.stepSize;\n    }\n\n    fallNdraw() {\n        this.snake.segments.forEach((segment, i) => {\n            (segment.direction < 4) && this.advanceSegment(i, true);\n            if (segment.direction < 4 && this.hitFloor(segment)) {\n                this.snake.deadSegments++;\n                segment.direction = 4;\n            }\n        });\n\n        // Where does this go?\n        if (this.snake.deadSegments >= this.snake.segments.length) {\n            // this.clearTimedEvents();\n            // this.keysOn();\n            this.gameOver();\n        }\n    }\n\n    hitFloor(segment) {\n        return segment.position[1] + this.halfSprite > this.canvas.height;\n    }\n\n    hitWall() {\n        let head = this.snake.segments[0];\n        let wallHit =\n            head.position[0] > this.canvas.width - this.halfSprite ||\n            head.position[0] < 0 + this.halfSprite ||\n            head.position[1] > this.canvas.height - this.halfSprite ||\n            head.position[1] < 0 + this.halfSprite;\n        if (wallHit) {\n            this.ea.publish('snack', 'You hit a wall');\n            return wallHit;\n        }\n    }\n\n    hitSnake() {\n        let self = this;\n        let head = this.snake.segments[0];\n        function overlap(segPos, headPos) {\n            let dx = Math.abs(segPos[0] - headPos[0]);\n            let dy = Math.abs(segPos[1] - headPos[1]);\n            let xOverlap = dx < self.halfSprite;\n            let yOverlap = dy < self.halfSprite;\n            return xOverlap && yOverlap;\n        }\n        for (let i = 1; i < this.snake.segments.length - 1; i++) {\n            let segment = this.snake.segments[i];\n            if (overlap(segment.position, head.position)) {\n                this.ea.publish('snack', 'You tried to eat yourself that&rsquo;s deadly');\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hitSnack() {\n        let self = this;\n        let head = this.snake.segments[0];\n        function overlap(snackPos, headPos) {\n            let dx = Math.abs(snackPos[0] - headPos[0]);\n            let dy = Math.abs(snackPos[1] - headPos[1]);\n            let xOverlap = dx < (self.snackSize + self.snake.segmentSize) / 2;\n            let yOverlap = dy < (self.snackSize + self.snake.segmentSize) / 2;\n            return xOverlap && yOverlap;\n        }\n        for (let i = 0; i < this.snacks.onBoard.length - 1; i++) {\n            let snack = this.snacks.onBoard[i];\n            if (overlap(snack.position, head.position)) {\n                (i > -1) && this.snacks.onBoard.splice(i, 1);\n                return this.snacks.methods[snack.name];\n            }\n        }\n        return '';\n    }\n\n    cutSnake() {\n        let halfSnake = Math.floor(this.snake.segments.length / 2)\n        this.snake.segments.splice(-halfSnake);\n        this.ea.publish('snack', 'Axe: you lost half of your length');\n    }\n\n    growHarder() {\n        if (this.growInterval > 500) {\n            this.growInterval -= 500;\n            this.restartIntervals();\n            setTimeout(() => {\n                this.growInterval += 500;\n                this.restartIntervals();\n            }, 15000);\n            this.ea.publish('snack', 'Blue pill: growing harder for 15 seconds');\n        }\n    }\n    growSlower() {\n        this.growInterval += 500;\n        this.restartIntervals();\n        setTimeout(() => {\n            this.growInterval -= 500;\n            this.restartIntervals();\n        }, 15000);\n        this.ea.publish('snack', 'Beer: growing slower for 15 seconds');\n    }\n    score100() {\n        this.scoreUpdate(1000);\n        this.ea.publish('snack', 'Diamond: you scored 1000 points');\n    }\n    score10() {\n        this.scoreUpdate(100);\n        this.ea.publish('snack', 'Gold: you scored 100 points');\n    }\n    scoreX10() {\n        if (this.scoreInterval > 250) {\n            this.scoreInterval -= 250;\n            setTimeout(() => {\n                this.scoreInterval += 250;\n            }, 15000);\n            this.ea.publish('snack', 'Ruby: scoring faster for 15 seconds');\n        }\n    }\n    trashSnacks() {\n        this.snacks.onBoard = [];\n        this.ea.publish('snack', 'Trash: you trashed all extra&rsquo;s');\n    }\n\n    slowdown() {\n        console.log('slowdown');\n        if (this.stepInterval < 7) {\n            this.stepInterval += 1;\n            this.restartIntervals();\n            this.ea.publish('speedChange', -1);\n        }\n        this.ea.publish('snack', 'Snail: running slower');\n    }\n\n    die() {\n        this.keysOff();\n        this.crawling = false;\n        this.clearTimedEvents()\n        this.fall();\n    }\n\n    scoreUpdate(amount) {\n        if (amount) {\n            this.score += amount;\n        } else {\n            this.score += this.snake.segments.length;\n        }\n        this.ea.publish('score', this.score);\n    }\n\n    gameOver() {\n        this.ea.publish('gameOver');\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        this.ea.subscribe('keyPressed', response => {\n            if (response.startsWith('Arrow') && this.snake.turnSteps == 0) {\n                this.snake.turnSteps = this.minTurnSteps();\n                switch (response) {\n                    case 'ArrowRight': direction = 0;\n                        break;\n                    case 'ArrowDown': direction = 1;\n                        break;\n                    case 'ArrowLeft': direction = 2;\n                        break;\n                    case 'ArrowUp': direction = 3;\n                        break;\n                }\n                // prevent going in opposite direction\n                (((direction + 2) % 4) !== this.snake.direction) && (this.snake.direction = direction);\n            }\n        });\n    }\n\n    setCenter() {\n        this.center = this.screenService.canvasCenter;\n    }\n\n    emptyHistory() {\n        let length = Math.round(this.snake.segmentSize / this.snake.stepSize);\n        let history = [];\n        // history.fill.call({ length: length }, [0, 0]);\n        for (let i = 0; i < length; i++) {\n            history.push([0, 0]);\n        }\n        return history;\n    }\n\n    minTurnSteps() {\n        return Math.ceil(this.snake.segmentSize / this.snake.stepSize) + 1;\n    }\n\n    initSnake() {\n        this.snake.segmentSize = this.screenService.spriteSize;\n        this.halfSprite = Math.round(this.snake.segmentSize / 2);\n        this.accelleration = 1.01;\n        this.score = 0;\n        this.snake.deadSegments = 0;\n        this.snake.stepSize = 1;\n        this.snake.segments = [];\n        this.snake.turnSteps = 0;\n        let segment = {\n            position: [this.center.x, this.center.y],\n            posHistory: this.emptyHistory()\n        }\n        this.snake.segments.push(segment);\n    }\n}","import { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { SnakeService } from './snake-service';\nimport { ScreenService } from './screen-service';\n\n@inject(EventAggregator, SnakeService, ScreenService)\n\nexport class TimingService {\n    constructor(eventAggregator, snakeService, screenService) {\n        this.ea = eventAggregator;\n        this.snakeService = snakeService;\n        this.screenService = screenService;\n\n        this.crawling = false;\n        this.steps = 0;\n        this.stepSize = 1;\n        this.fallTimerHandle = null;\n        this.stepTimerHandle = null;\n        this.pause = false;\n\n        this.setSubscribers();\n    }\n\n    startGame() {\n        this.resetIntervals();\n        this.snakeService.initSnake(1);\n        this.crawling = true;\n        this.resumeGame();\n    }\n\n    resumeGame() {\n        this.stepTimerHandle = setInterval(() => {\n            this.drawScreen()\n        }, this.stepInterval);\n    }\n\n    drawScreen() {\n        this.steps += 1;\n        this.snakeService.step();\n        this.screenService.fadeArena();\n        this.screenService.drawSnake(this.snakeService.snake);\n        (this.steps % this.growInterval == 0) && (this.snakeService.grow());\n        (this.steps % this.speedupInterval == 0) && (this.speedUp());\n    }\n\n    speedUp() {\n        if (this.stepSize <= 16) {\n            this.stepSize = this.snakeService.doubleSpeed();\n            this.clearTimedEvents();\n            this.stepInterval += 20;\n            this.resumeGame();\n            this.ea.publish('speedChange', this.stepSize);\n        }\n    }\n\n    // fall() {\n    //     this.fallTimerHandle = setInterval(() => {\n    //         this.fallNdraw();\n    //     }, 0);\n    // }\n\n    clearTimedEvents() {\n        clearInterval(this.stepTimerHandle);\n        clearInterval(this.growTimerHandle);\n        clearInterval(this.speedupTimerHandle);\n        // clearInterval(this.fallTimerHandle);\n        // clearInterval(this.snackTimerHandle);\n        // clearInterval(this.scoreTimerHandle);\n    }\n\n    pauseGame() {\n        if (this.crawling) {\n            this.pause = !this.pause;\n            if (this.pause) {\n                this.clearTimedEvents();\n            } else {\n                this.resumeGame();\n            }\n        }\n    }\n\n    restart() {\n        if (!this.pause) {\n            this.clearTimedEvents();\n            this.startGame();\n        }\n    }\n\n    setSubscribers() {\n        let direction = 0;\n        this.ea.subscribe('keyPressed', response => {\n            switch (response) {\n                case 'Enter': this.ea.publish('start');\n                    break;\n                case ' ': this.ea.publish('pause');\n                    break;\n            }\n        });\n        this.ea.subscribe('start', response => {\n            this.restart();\n        });\n        this.ea.subscribe('pause', response => {\n            this.pauseGame();\n        });\n    }\n\n    resetIntervals() {\n        this.stepInterval = 20;\n        this.scoreInterval = 10;\n        this.growInterval = 30;\n        this.speedupInterval = 100;\n        // this.snackInterval = 2500;\n        this.speed = 0;\n    }\n\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}